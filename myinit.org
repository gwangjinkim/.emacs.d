

#+STARTUP: overview hidestars indent align inlineimages

* Settings
  
#+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)

    ;; maximize window
    (global-set-key (kbd "C-c M") 'toggle-frame-maximized)

    (defun enlarge-my-window (&optional height-increase-lines width-increase-columns)
      "Resize the current window. Default: height by 10 lines and width by 20 columns.
       You can specify custom values for both height and width."
      (interactive
       (list
        (read-number "Increase height by (lines): " 10)  ;; Default is 10
        (read-number "Increase width by (columns): " 20)))  ;; Default is 20
      ;; Apply height and width increases
      (enlarge-window height-increase-lines)
      ;; (enlarge-window-horizontally width-increase-columns)
      (enlarge-window width-increase-columns t))

    (global-set-key (kbd "C-c w") 'enlarge-my-window)


    (use-package sweet-theme
      :ensure t
      :config
      (load-theme 'sweet t))

    ;; Icons backend (doom-modeline uses nerd-icons now)
    (use-package nerd-icons
      :ensure t
      :if (display-graphic-p))

    (use-package doom-modeline
      :ensure t
      :after nerd-icons
      :hook
      (after-init . doom-modeline-mode)
      :custom
      (doom-modeline-icon t)  ;; put only (var value pairs here)
      (doom-modeline-height 28)
      ;; (doom-modeline-major-mode-icon nil) ;; example toggle
      :config
      ;; function calls go here, not under :custom
      ;; you need to do `brew tap homebrew/cask-fonts`
      ;; then: `brew install --cask font-jetbrains-mono-nerd-font`
      (when (member "JetBrainsMono Nerd Font" (font-family-list))
        (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font-13")))


    ;; sly RET in mrepl fix
    (defun my/sly-mrepl-ret-override ()
    "Make RET evaluate the expression in SLY MREPL, even with paredit-mode active."
    (define-key paredit-mode-map (kbd "RET") nil)
    (local-set-key (kbd "RET") #'sly-mrepl-return)
    (local-set-key (kbd "C-j") #'sly-mrepl-return)) ;; optional fallback

  (add-hook 'sly-mrepl-mode-hook #'my/sly-mrepl-ret-override)
#+END_SRC


* Try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-separator " â†’ " )
    (setq which-key-prefix-prefix "+"))
#+END_SRC


* Ido mode

Using swiper comment it out!
#+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)				
#+END_SRC

* Ibuffer

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
  (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default open in another window
#+END_SRC

* Tabbar

#+BEGIN_SRC emacs-lisp
  (use-package tabbar
    :ensure t
    :config
    (tabbar-mode 1))
#+END_SRC


* vterm

#+begin_src emacs-lisp
  (use-package eshell-vterm
    :ensure t
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)) ;; optional: increase scrollback
#+end_src
* Window moves

** Windmove
Move by S-arrows between windows
#+BEGIN_SRC emacs-lisp
;; (windmove-default-keybindings)
#+END_SRC


** Winnermode
Move via C-c left-right-arrow
#+BEGIN_SRC emacs-lisp
;; (winner-mode 1)
#+END_SRC

** Ace-window
   Still uses C-x o.


#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window))
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC

* Swiper
  For better searches

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

  if using swiper, comment out ido.
  
* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :custom
    (projectile-project-search-path '("~/projects/")) ;; optional
    :bind-keymap
    ("C-c p" . projectile-command-map))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (use-package-autoload-keymap 'projectile-command-map 'projectile nil) |

* Navigation with Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

They recommend `:config (avy-setup-default)

* Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC



* JavaScript and TypeScript
#+begin_src emacs-lisp
  ;; js itself is natively recognized



  ;; we add typescript


  ;; ;; Define ts-mode for editing TypeScript src blocks in Org mode
  ;; (define-derived-mode ts-mode typescript-mode "ts"
  ;;   "Major mode for editing TypeScript src blocks in Org mode.")

  ;; ;; TypeScript Mode
  ;; (use-package typescript-mode
  ;;   :ensure t  ;; Install `typescript-mode` if not already installed
  ;;   :mode ("\\.ts\\'" . typescript-mode)  ;; Automatically associate `.ts` files with `typescript-mode`
  ;;   :init
  ;;   ;; Optional initialization if needed
  ;;   (setq typescript-indent-level 2)  ;; Set indentation level to 2 spaces
  ;;   )

  ;; ;; DAP Mode for Debugging
  ;; (use-package dap-mode
  ;;   :ensure t  ;; Install `dap-mode` if not already installed
  ;;   :config
  ;;   ;; Configure dap-mode as needed
  ;;   )

  ;; ;; LSP Mode for Language Server Protocol
  ;; (use-package lsp-mode
  ;;   :ensure t  ;; Install `lsp-mode` if not already installed
  ;;   :commands lsp  ;; Initialize lsp-mode when needed
  ;;   :hook
  ;;   ((typescript-mode . lsp)
  ;;    (javascript-mode . lsp))
  ;;   :custom
  ;;   (lsp-enable-file-watchers nil)  ;; Disable file watchers for better performance
  ;;   )

  ;; ;; Include Org Babel TypeScript Execution Configuration
  ;; ;; Reference: https://www.reddit.com/r/emacs/comments/b7rsxu/behold_orgbabelexecutetypescript/
  ;; (use-package ob-typescript
  ;;   :after org
  ;;   :config
  ;;   (add-to-list 'org-babel-load-languages '(typescript . t))
  ;;   (setq org-babel-default-header-args:typescript
  ;;         '((:results . "output")
  ;;           (:exports . "both")
  ;;           (:shebang . "#!/usr/bin/env ts-node")
  ;;           (:eval . "typescript")))
  ;;   )

  ;; ;; Optional: Add tree-sitter and tree-sitter-langs configuration if needed
  ;; ;; (use-package tree-sitter
  ;; ;;   :ensure t
  ;; ;;   :config
  ;; ;;   (require 'tree-sitter-langs)
  ;; ;;   (global-tree-sitter-mode)




  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :config
    ;; Optional additional configuration can go here
    :init
    (setq typescript-indent-level 2)  ;; Set indentation level to 2 spaces
    )

  ;; and add org support
  (use-package ob-typescript
    :ensure t
    :config
    ;; Set the command for TypeScript execution
    (setq org-babel-command:typescript "npx ts-node"))
#+end_src

* YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
  
#+end_src
* Org stuff
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path (expand-file-name "~/src/lisp") t)
;; (add-to-list 'load-path (expand-file-name "~/path/to/orgdir/contrib/lisp") t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (setq org-adapt-indentation t) ;; align text to header's start
        )
#+END_SRC

** Org-babel-execute
#+BEGIN_SRC emacs-lisp
        ;; (require 'org)
        ;; (require 'ob)

        ;; (require 'ob-clojure)
        ;; (setq org-babel-clojure-backend 'cider)

        (org-babel-do-load-languages
         'org-babel-load-languages
         '((python . t)
           (R . t)
           (julia . t)
           (lisp . t)
           (clojure . t)
           (js . t)
           (typescript . t)
           
           ))

        ;; stop emacs asking for confirmation
        (setq org-confirm-babel-evaluate nil)

#+END_SRC

#+RESULTS:

User `:result pp` to get value and output 
in one go and functioning correct.
value e.g. didn't work - no newline inbetween
results!

** Ox-reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

** Org-Roam
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'package-archives
  ;;              (cons "gnu-devel" "https://elpa.gnu.org/devel/")
  ;;              t)

  ;; (use-package org-roam
  ;;  :ensure t)

  ;; (use-package org-roam
  ;;   :ensure t
  ;;   :custom
  ;;   (org-roam-directory "~/RoamNotes")
  ;;   (org-roam-completion-everywhere t)
  ;;   :bind (("C-c n l" . org-roam-buffer-toggle)
  ;;          ("C-c n f" . org-roam-node-find)
  ;;          ("C-c n i" . org-roam-node-insert)
  ;;          :map org-mode-map
  ;;          ("C-M-i"   . completion-at-point))
  ;;   :config (org-roam-setup))
#+END_SRC

** Org: Smart fill for pasted bullets & numbered lists
#+BEGIN_SRC emacs-lisp
  ;; ;;; --- org smart fill: bullets + numbered + hanging indent ---

  ;; (defun gjk--normalize-pasted-bullets (beg end)
  ;;   "Normalize pasted bullets/numbers within [beg,end] to proper Org markers.
  ;; Converts inline or line-start 'â€¢' to '- ', and 'N.' to 'N. ', each starting a new line."
  ;;   (save-excursion
  ;;     (save-restriction
  ;;       (narrow-to-region beg end)

  ;;       ;; 1) Line-start bullets:  ^\s*â€¢\s+   ->  "- "
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "^[ \t]*â€¢[ \t]+" nil t)
  ;;         (replace-match "- "))

  ;;       ;; 2) Inline bullets:  \s+â€¢\s+   ->  "\n- "
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "[ \t]+â€¢[ \t]+" nil t)
  ;;         (replace-match "\n- "))

  ;;       ;; 3) Line-start numbered:  ^\s*\([0-9]+\)\.\s+  ->  "N. "
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "^[ \t]*\\([0-9]+\\)\\.[ \t]+" nil t)
  ;;         (replace-match (concat (match-string 1) ". ")))

  ;;       ;; 4) Inline numbered:  \s+\([0-9]+\)\.\s+  ->  "\nN. "
  ;;       (goto-char (point-min))
  ;;       (while (re-search-forward "[ \t]+\\([0-9]+\\)\\.[ \t]+" nil t)
  ;;         (replace-match (concat "\n" (match-string 1) ". "))))))

  ;; (defun gjk--item-end ()
  ;;   "Move point to end of current list item (before next item or blank). Return point."
  ;;   (forward-line 1)
  ;;   (while (and (not (eobp))
  ;;               (not (looking-at "^[ \t]*\\(- \\|[0-9]+\\. \\)"))
  ;;               (not (looking-at "^[ \t]*$")))
  ;;     (forward-line 1))
  ;;   (point))

  ;; (defun gjk-org-smart-fill (&optional justify)
  ;;   "Like `fill-paragraph' in Org, plus:
  ;;   - Normalize pasted TABâ€¢TAB to '- ' and TAB1.TAB to '1. '.
  ;;   - Hanging indent: '- ' items = 2 spaces; 'N. ' items = width of the marker (e.g. '1. ' â‡’ 3, '10. ' â‡’ 4)."
  ;;   (interactive (list (when current-prefix-arg t)))
  ;;   (unless (derived-mode-p 'org-mode)
  ;;     (user-error "gjk-org-smart-fill is for Org buffers"))
  ;;   (save-excursion
  ;;     (let* ((use-region (use-region-p))
  ;;            (beg (if use-region
  ;;                     (region-beginning)
  ;;                   (save-excursion (backward-paragraph) (point))))
  ;;            (end (if use-region
  ;;                     (region-end)
  ;;                   (save-excursion (forward-paragraph) (point)))))
  ;;       ;; 1) Normalize bullets/numbers
  ;;       (gjk--normalize-pasted-bullets beg end)
  ;;       ;; 2) Fill with per-item hanging indents
  ;;       (save-restriction
  ;;         (narrow-to-region beg end)
  ;;         (goto-char (point-min))
  ;;         (while (not (eobp))
  ;;           (cond
  ;;            ;; Skip src blocks
  ;;            ((ignore-errors (org-in-src-block-p))
  ;;             (goto-char (or (save-excursion (org-babel-end-of-src-block) (point))
  ;;                            (line-end-position))))
  ;;            ;; List item (bullet or numbered)
  ;;            ((looking-at "^[ \t]*\$begin:math:text$- \\\\|\\\\([0-9]+\\\\. \\$end:math:text$\\)")
  ;;             (let ((item-beg (point)))
  ;;               (goto-char (gjk--item-end))
  ;;               (let ((item-end (point)))
  ;;                 (save-restriction
  ;;                   (narrow-to-region item-beg item-end)
  ;;                   ;; Ensure exactly one space after marker on first line
  ;;                   (goto-char (point-min))
  ;;                   (cond
  ;;                    ((looking-at "^[ \t]*-\$begin:math:text$[ \\t]*\\$end:math:text$")
  ;;                     (replace-match "- "))
  ;;                    ((looking-at "^[ \t]*\$begin:math:text$[0-9]+\\$end:math:text$\\.[ \t]*")
  ;;                     (replace-match (concat (match-string 1) ". "))))
  ;;                   ;; Hanging indent equals visual width of marker
  ;;                   (let* ((m (save-excursion
  ;;                               (goto-char (point-min))
  ;;                               (cond
  ;;                                ((looking-at "^[ \t]*- ") "- ")
  ;;                                ((looking-at "^[ \t]*\$begin:math:text$[0-9]+\\\\. \\$end:math:text$") (match-string 1))
  ;;                                (t "- "))))
  ;;                          (fill-prefix (make-string (string-width m) ?\s)))
  ;;                     (fill-region (point-min) (point-max) justify))))))
  ;;            ;; Normal paragraph
  ;;            (t
  ;;             (let ((pbeg (point)))
  ;;               (forward-paragraph)
  ;;               (fill-region pbeg (point) justify))))
  ;;           ;; Skip blank lines
  ;;           (while (and (not (eobp)) (looking-at "^[ \t]*$"))
  ;;             (forward-line 1)))))))


  ;; ;; Remap M-q (fill-paragraph) only in Org buffers
  ;; (defvar gjk-org-smart-fill-mode-map
  ;;   (let ((map (make-sparse-keymap)))
  ;;     (define-key map [remap fill-paragraph] #'gjk-org-smart-fill)
  ;;     map))

  ;; (define-minor-mode gjk-org-smart-fill-mode
  ;;   "Use `gjk-org-smart-fill' for M-q in Org buffers."
  ;;   :lighter " gjk-fill"
  ;;   :keymap gjk-org-smart-fill-mode-map)

  ;; (add-hook 'org-mode-hook #'gjk-org-smart-fill-mode)
  ;; ;;; --- end ---
#+END_SRC

#+RESULTS:
| gjk-org-smart-fill-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | #[nil ((org-bullets-mode 1)) nil] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |


Thatâ€™s it. After reloading: â€¢ Press M-q on a paragraph or list item as
	usual.  â€¢ Pasted TAB â€¢ TAB â€¦ becomes - â€¦ on its own line with
	a 2-space hanging indent.  â€¢ Pasted TAB 1. TAB â€¦ becomes 1. â€¦
	with a hanging indent equal to the marker width ("1. " = 3
	spaces, "10. " = 4, etc.).  â€¢ Non-list paragraphs fill exactly
	like the normal M-q.

Notes / tweaks â€¢ Your org-bullets (visual bullets) wonâ€™t
	interfereâ€”this only changes the textual markers.  â€¢ If your
	pasted bullets sometimes use a different symbol than â€¢
	(U+2022) or *, add it to the [â€¢*] in the regex.  â€¢ To disable
	temporarily in a buffer: M-x gjk-org-smart-fill-mode.  â€¢ If
	you later prefer a different indent for - bullets, change the
	fallback marker width by replacing "- " with your preferred
	marker (e.g., three spaces after - ) in the m computation.
        


* Conda environment

#+begin_src emacs-lisp
    ;; add .bin/local to PATH variable the current
    ;; this is because I start emacs with
    ;; env HOME=$HOME/somefolder

    (defun joindirs (root &rest dirs)
      "Joins a series of directories together,
         like Python's os.path.join
         (joindirs \"/a\" \"b\" \"c\") => /a/b/c"
      (if (not dirs)
          root
        (apply 'joindirs
               (expand-file-name (car dirs) root)
               (cdr dirs))))

    (setenv "PATH" (concat (getenv "PATH") ":"
                           (joindirs (getenv "HOME") ".bin" "local")))

    ;; get conda environment
    (require 'json)

    (defun get-conda-envs-dir ()
      "Get the primary directory where Conda environments are stored."
      (let* ((output (process-lines "conda" "info" "--json"))
             (json-object-type 'hash-table)
             (json-array-type 'list)
             (json-key-type 'string)
             (info (json-read-from-string (mapconcat 'identity output "\n")))
             (envs-dirs (gethash "envs_dirs" info)))
        (if envs-dirs
            (car envs-dirs)
          (error "Could not determine Conda environments directory"))))

    ;; set conda env as workon
    (defun set-conda-envs-dir-as-workon ()
      "Set the Conda environments directory as the WORKON environment variable."
      (let ((conda-envs-dir (get-conda-envs-dir)))
        (setenv "WORKON_HOME" conda-envs-dir)
        (message "WORKON_HOME set to %s" conda-envs-dir)))
#+end_src

#+RESULTS:
: set-conda-envs-dir-as-workon



* Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC


* Python settings


I deactivated my Flycheck section, because
the EPC and flycheck created only problems
# sudo pip install --upgrade pylint$

#+BEGIN_SRC emacs-lisp
  ;; (use-package flycheck
  ;;   :ensure t
  ;;   :init
  ;;   (global-flycheck-mode t))
#+END_SRC

# sudo pip install --upgrade virtualenv
# sudo pip install --upgrade epc

#+BEGIN_SRC emacs-lisp
  ;; (use-package jedi                       
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (add-hook 'python-mode-hook 'jedi:ac-setup))

  ;; (use-package elpy
  ;;   :ensure t
  ;;   :config
  ;;   (elpy-enable)
  ;;   (set-conda-envs-dir-as-workon))
#+END_SRC

#+RESULTS:
: t

I will instead put my Python settings with elpy.

#+begin_src emacs-lisp
  ;; manually add two dependencies

  (use-package spinner
    :ensure t)

  (use-package compat
    :ensure t)

  (use-package highlight-indentation
    :ensure t)

  ;; to then set elpy
  (use-package elpy
    :ensure t
    :config
    (elpy-enable)
    ;; (setq elpy-rpc-virtualenv-path 'current) ;; otherwise error
    ;; do: sudo apt install virtualenv
    ;;     sudo apt install python3-pip
    (setq elpy-rpc-python-command "python3")
    ;; otherwise error on M-x elpy-config
    ;; 'Neither easy_install nor pip found
    ;;  use ipython
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt")
    ;; to be able to use pyvenv-workon, one has to set $WORKON_HOME var
    (set-conda-envs-dir-as-workon))
#+end_src

#+RESULTS:
: t


  - Automatic error indication

  - run while cursor in Python buffer: C-c C-c
    (it opens \*Python\* buffer)

  - it supports via `pyvenv` package virtual environments
    use existing virtual env         M-x pyvenv-workon <path-to-python-in-conda> RET
    deactivate virtual env           M-x pyvenv-deactivate
    
  - config elpy:                     M-x elpy-config


  And we now add Debugging for Python.

  The question is also - how can I improve Debugging for R and Julia?

  
* Python Debugging

#+begin_src emacs-lisp

  (use-package dape
    :ensure t
    :defer t
    :init
    ;; Window arrangement and working directory setup
    (setq dape-buffer-window-arrangement 'right
          dape-cwd-fn 'projectile-project-root)
    ;; To use window configuration like gud (gdb-mi)
    ;; (setq dape-buffer-window-arrangement 'gud)

    :hook
    ((kill-emacs . dape-breakpoint-save) ;; save breakpoints on quit
     (after-init . dape-breakpoint-load) ;; load breakpoints on startup
     (dape-stopped-hook . dape-info)
     (dape-start-hook . (lambda () (save-some-buffers t t)))
     (dape-mode . my/setup-dape-bindings))

    :bind (
           ;; Global bindings
           ("<f5>" . my/dape-python)
           ("<f6>" . my/dape-project-debug)
           ;; Local bindings inside dape-mode
           ;; (:map dape-mode-map
           ;;      ("C-c w a" . dape-watch-add)
           ;;      ("C-c w r" . dape-watch-remove)
           ;;      ("C-c w w" . dape-watch))
           )

    :config
    ;; Enable global breakpoint toggling
    (dape-breakpoint-global-mode)

    ;; Extend default dape configs with a Python example
    (setq dape-configs
          (append
           '((python
              :name "Python :: Launch file"
              :type "python"
              :request "launch"
              :program nil ;; Use buffer-file-name by default
              :cwd nil     ;; Use `default-directory' by default
              :env nil
              :args nil
              :console "integratedTerminal"))
           dape-configs))

    ;; Function to start dape for current Python buffer
    (defun my/dape-python ()
      "Start dape debug session for current Python file."
      (interactive)
      (let ((dape-config
             `(:type "python"
                     :name "Python :: current file"
                     :request "launch"
                     :program ,(buffer-file-name)
                     :cwd ,(projectile-project-root)
                     :console "integratedTerminal")))
        (dape-debug dape-config)))

    ;; Local bindings in dape-mode
    (defun my/setup-dape-bindings ()
      (when (boundp 'dape-mode-map)
        (define-key dape-mode-map (kbd "C-c w a") #'dape-watch-add)
        (define-key dape-mode-map (kbd "C-c w r") #'dape-watch-remove)
        (define-key dape-mode-map (kbd "C-c w w") #'dape-watch)
        (define-key dape-mode-map (kbd "C-c C-c") #'dape-continue)))

    ;; Automatically add a watch expression when DAPE starts (optional!)
    ;; You might prefer doing this manually, or define your own helper instead.
    ;; (add-hook 'dape-start-hook (lambda () (dape-watch-add "my_variable")))


    ;; Pulse source line (performance hit)
    ;; (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

    ;; To not display info and/or buffers on startup
    ;; (remove-hook 'dape-start-hook 'dape-info)
    ;; (remove-hook 'dape-start-hook 'dape-repl)

    ;; To display info and/or repl buffers on stopped
    ;; (add-hook 'dape-stopped-hook 'dape-info)
    ;; (add-hook 'dape-stopped-hook 'dape-repl)

    ;; Kill compile buffer on build success
    ;; (add-hook 'dape-compile-hook 'kill-buffer)
  
    ;; Save buffers on startup, useful for interpreted languages
    ;; (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

    )
#+end_src

#+RESULTS:
: my/dape-project-debug

You need to have debugpy installed (Microsoft's Python debugger)

`pip install debugpy`

if you're using pyvenv or conda, activate the right env first!

One has to create a custom configuration:

(setq dape-configs
      (append
       '((python
          :name "Python :: Launch file"
          :type "python"
          :request "launch"
          :program nil ;; Use buffer-file-name by default
          :cwd nil     ;; Use `default-directory' by default
          :env nil
          :args nil
          :console "integratedTerminal")) ;; or "internalConsole"
       dape-configs))

or to debug the current buffer file more automatically:

(defun my/dape-python ()
  "Start dape debug session for current Python file."
  (interactive)
  (let ((dape-config
         `(:type "python"
           :name "Python :: current file"
           :request "launch"
           :program ,(buffer-file-name)
           :cwd ,(projectile-project-root)
           :console "integratedTerminal")))
    (dape-debug dape-config)))

 And then bind it to a key
 (global-set-eky (kbd "<f5>") #'my/dape-python)

 if dape--restart-in-progress-p is already defined as sth else than a generic function
 occurs:
 (fmakunbound 'dape--restart-in-progress-p)
 How to use DAPE (Workflow)

 | set breakpoints          | C-x C-a b (default)      | M-x dape-breakpoint-toggle                    |
 | set brekpoints           | with mouse               | dape-breakpoint-global-mode is enabled        |
 | start debugging          |                          | M-x my/dape-python                            |
 |                          |                          | M-x dape-debug (and select python)            |
 | when stops at breakpoint | use DAPE buffer UI to    | step over, step in, continue, etc             |
 |                          |                          | watch variables, stack frames, inspect locals |
 |                          |                          |                                               |
 | add a watch expression   | C-c w a                  | M-x dape-watch-add RET my_variable RET        |
 | remove watch expression  | C-c w r                  | M-x dape-watch-remove RET my_variable RET     |
 | list all watches         | C-c w w                  | M-x dape-watch RET                            |
 |                          | (or see side panel DAPE) |                                               |

 bonus settings (optional, nice-to-have)

 show locals automatically:
 (add-hook 'dape-stopped-hook #'dape-info)

 save files on debug start:
 (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

 add custom watch expressions:
 (dape-watch-add "my_variable")


 message:
 Elpy is updating the RPC virtualenv (â€™/Users/josephus/.emacs.d/elpy/rpc-venvâ€™)
 interesting that it has its own virtualenv

 it runs
 python3 -m venv ~/.emacs.d/elpy/rpc-venv
 pip install -U jedi rope black flake8 importmagic epc


 keybindings for watch

 (with-eval-after-load 'dape
  (define-key dape-mode-map (kbd "C-c w a") #'dape-watch-add)
  (define-key dape-mode-map (kbd "C-c w r") #'dape-watch-remove)
  (define-key dape-mode-map (kbd "C-c w w") #'dape-watch)) ;; show watch buffer

 dape-repl works only if you are in a stopped debugging state!

 
Command
Set breakpoint
C-x C-a C-b
Start debugging
M-x my/dape-python or <f5>
Step over
dape-next (n)
Step into
dape-step-in (s)
Continue
dape-continue (c)
Open REPL
M-x dape-repl
Show locals
M-x dape-info




* Undo tree
Emacs tree is linear and that is not safe! (while going
back and forth, you can accidentally loose previous states).
undo-tree comes to rescue!
#+begin_src emacs-lisp
      ;; Enable undo-tree globally
    (use-package undo-tree
      :ensure t
      ;; :init ;; only for early setting slike variables
      :custom
      (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))) ; optional: persistent history
      (setq undo-tree-auto-save-history t)
      :config ;; run after package is loaded
      (global-undo-tree-mode))
#+end_src

- undo by `C-x u` or `C-/` like before!
- redo `M-_`
- open tree view `C-x u`
  inside tree view:
     move around: `arrows`
     restore versions: `RET`
  quit tree view: `q`
  
Basic emacs undo and redo is C-/ and C-_
Undo tree you can bring up with C-x u
* Git
#+begin_src elisp
  ;; Git integration for emacs
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+end_src
* Common Lisp
#+BEGIN_SRC elisp
  ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; ;; Replace "sbcl" with the path to your implementation
  ;; (setq inferior-lisp-program "/usr/bin/sbcl")

#+END_SRC
* Common Lisp Roswell
#+BEGIN_SRC emacs-lisp
  ;; for slime

  ;; (with-eval-after-load 'sly-mrepl
  ;;   (define-key sly-mrepl-mode-map (kbd "RET") #'sly-mrepl-return))

  ;; (with-eval-after-load 'sly-mrepl
  ;;  (define-key sly-mrepl-mode-map (kbd "S-RET") #'sly-mrepl-return))
  (defun string-trim (str)
    "Trim leading and trailing whitespace from STR."
    (replace-regexp-in-string "\\`[ \t\n\r]+" "" (replace-regexp-in-string "[ \t\n\r]+\\'" "" str)))

  (defun system-ram-size-in-mb ()
    "Return the system RAM size in megabytes, platform-independent."
    (interactive)
    (let ((ram-size-command
           (cond
            ((eq system-type 'darwin) "sysctl -n hw.memsize")
            ((eq system-type 'gnu/linux) "grep MemTotal /proc/meminfo | awk '{print $2 * 1024}'")
            ((eq system-type 'windows-nt) "wmic computersystem get TotalPhysicalMemory /Value | findstr TotalPhysicalMemory="))))
      (let ((output (shell-command-to-string ram-size-command)))
        (if output
            (let* ((output (split-string output "="))
                   (output (or (cadr output) (car output)))
                   (output (string-to-number (string-trim output))))
              (/ output (* 1024 1024)))
          (error "Failed to get system RAM size")))))




  ;; ;; set memory of sbcl to your machine's RAM size for sbcl and clisp
  ;; ;; (but for others - I didn't used them yet)
  ;; (defun unix-system-ram-size ()
  ;;   (let ((bytes (string-to-number (shell-command-to-string "sysctl hw.memsize | awk '{print $2}'"))))
  ;;     (/ bytes (* 1024 1024)))) ;; this works also for macos
  ;; ;; previously  "free --mega | awk 'FNR == 2 {print $2}'"
  ;; ;; (linux-system-ram-size)


  ;; ;; Define functions to manually switch between SLIME and SLY
  ;; (defun use-sly ()
  ;;   "Switch to using SLY for this session."
  ;;   (interactive)
  ;;   (remove-hook 'lisp-mode-hook 'slime-lisp-mode-hook)
  ;;   (require 'sly)
  ;;   (sly))

  ;; (defun use-slime ()
  ;;   "Switch to using SLIME for this session."
  ;;   (interactive)
  ;;   (remove-hook 'lisp-mode-hook 'sly-editing-mode)
  ;;   (require 'slime)
  ;;   (slime))

   (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode lisp-mode sly-mode sly-mrepl-mode racket-mode racket-repl-mode) . paredit-mode)
    
    :bind
    (("C-c <right>" . paredit-forward-slurp-sexp)
     ("C-c <left>" . paredit-backward-slurp-sexp)
     ("C-c <up>" . paredit-forward-barf-sexp)
     ("C-c <down>" . paredit-backward-barf-sexp))) ;; use C-c instead of just C-right etc because of MacOS


  ;; long time my slime setting
  (use-package slime
    :ensure t
    :hook ((lisp-mode .slime-mode))
    :config
    ;; roswell is not available for windows.
    (cond
     ((eq system-type 'darwin) (load (expand-file-name "~/.roswell/helper.el")))
     ((eq system-type 'gnu/linux) (load (expand-file-name "~/.roswell/helper.el")))
     ((eq system-type 'windows-nt) (load (concat (getenv "USERPROFILE") "\\quicklisp\\slime-helper.el"))
      (setq inferior-lisp-program (concat "sbcl --dynamic-space-size "
                                          (number-to-string (system-ram-size-in-mb)))))
     (t
      (error "Failed to load helper.el")))

    ;; $ ros config
    ;; $ ros use sbcl dynamic-space-size=3905
    ;; query with: (/ (- sb-vm:dynamic-space-end sb-vm:dynamic-space-start) (expt 1024 2))
    (cond
     ((or (eq system-type 'darwin) (eq system-type 'gnu/linux))
      (setq inferior-lisp-program (concat "ros -Q dynamic-space-size=" (number-to-string (system-ram-size-in-mb)) " run"))))

    ;; and for fancier look I personally add:
    (setq slime-contribs '(slime-fancy slime-cl-indent))

    ;; ;; ensure correct indentation e.g. of `loop` form
    (add-to-list 'slime-contribs 'slime-cl-indent)

    ;; don't use tabs
    (setq-default indent-tabs-mode nil)

    ;; actually for sly repl
    (with-eval-after-load 'sly-mrepl
      (define-key sly-mrepl-mode-map (kbd "RET") #'sly-mrepl-return))

    )





  ;; (setq slime-lisp-implementations `(("sbcl" ("ros use sbcl && ros run --" "--dynamic-space-size"
  ;;                                             ,(number-to-string (linux-system-ram-size))))
  ;;                                    ("clisp" ("ros use clisp && ros run --" "-m"
  ;;                                              ,(number-to-string (linux-system-ram-size))
  ;;                                              "MB"))
  ;;                                    ("ecl" ("ros use ecl && ros run --"))
  ;;                                    ("cmucl" ("ros use cmucl && ros run --"))))

  ;; ;; doesn't work as expected!! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; Debugger display values
  ;; (defun my-slime-step-display-value (n)
  ;;   "Step N times through the code and display the return value."
  ;;   (interactive "p")
  ;;   (slime-eval `(swank:stepper-step ,n))
  ;;   (let ((last-result (slime-eval '(swank:inspector-call-nth-function 0))))
  ;;     (message "Return value: %s" last-result)))

  ;; (define-key slime-mode-map (kbd "C-c C-s") 'my-slime-step-display-value)

  ;; (defun my-sly-step-display-value (n)
  ;;   "Step N times through the code and display the return value."
  ;;   (interactive "p")
  ;;   (sly-db-step n)
  ;;   (let ((last-result (sly-eval '(slynk:call-with-last-step-result))))
  ;;     (message "Return value: %s" last-result)))
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; (define-key sly-db-mode-map (kbd "C-c C-s") 'my-sly-step-display-value)


  ;; sly

  ;; (use-package sly
  ;;   :ensure t
  ;;   :hook ((lisp-mode .sly-editing-mode))
  ;;   :config
  ;;   ;; Roswell is not available for Windows.
  ;;   (cond
  ;;    ((eq system-type 'darwin) (load (expand-file-name "~/.roswell/helper.el")))
  ;;    ((eq system-type 'gnu/linux) (load (expand-file-name "~/.roswell/helper.el")))
  ;;    ((eq system-type 'windows-nt) (load (concat (getenv "USERPROFILE") "\\quicklisp\\sly-helper.el"))
  ;;     (setq inferior-lisp-program (concat "sbcl --dynamic-space-size "
  ;;                                         (number-to-string (system-ram-size-in-mb)))))
  ;;    (t
  ;;     (error "Failed to load helper.el")))

  ;;   ;; Set dynamic-space-size for SBCL with Roswell for macOS and Linux
  ;;   (cond
  ;;    ((or (eq system-type 'darwin) (eq system-type 'gnu/linux))
  ;;     (setq inferior-lisp-program (concat "ros -Q dynamic-space-size=" (number-to-string (system-ram-size-in-mb)) " run"))))

  ;;   ;; Enable SLY contribs for a fancier experience
  ;;   (setq sly-contribs '(sly-fancy slynk-mrepl sly-mrepl sly-cl-indent)) ;; slynk-mrepl is necessary contrib!

  ;;   ;; Don't use tabs for indentation
  ;;   (setq-default indent-tabs-mode nil)
  ;;   )

  ;; ;; Change keybindings for SLIME or SLY if necessary to avoid conflicts
  ;; (with-eval-after-load 'sly
  ;;   (define-key sly-mode-map (kbd "C-c C-s") 'sly-selector))

  ;; (with-eval-after-load 'slime
  ;;   (define-key slime-mode-map (kbd "C-c C-s") 'slime-selector))

  ;; make results visible inline
  (use-package lispy
    :ensure t
    :hook ((lisp-mode emacs-lisp-mode) . lispy-mode)
    :config
    ;; Define `C-,` as a prefix key
    (define-prefix-command 'lispy-prefix)
    (global-set-key (kbd "C-l") 'lispy-prefix)

    ;; bind `C-, e` to lispy-eval-and-insert
    (define-key lispy-prefix (kbd "e") 'lispy-eval-and-insert)
    ;; Optionally, you can also configure other keys or customize lispy behavior here.
    )

#+END_SRC

#+RESULTS:
| paredit-mode | lispy-mode | ac-emacs-lisp-mode-setup | ert--activate-font-lock-keywords |

* Racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :ensure t
    :hook (racket-mode . racket-xp-mode))

  (use-package company
    :ensure t
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.1)
    (setq company-tooltip-align-annotations t)
    :hook
    ((racket-mode . company-mode)
     (racket-repl-mode . company-mode)))

  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((racket-mode . rainbow-delimiters-mode)
     (racket-repl-mode . rainbow-delimiters-mode)))

#+end_src

#+RESULTS:
: paredit-backward-barf-sexp

* R/
Julia ESS

For conda use still `M-x pyvenv-activate RET path to conda env`

#+BEGIN_SRC emacs-lisp
    ;; (use-package ess
    ;;   :ensure t
    ;;   :init 
    ;;   (require 'ess-site)
    ;;   (setq ess-use-flymake nil)
    ;;   (setq ess-eval-visibly-p nil)
    ;;   (setq ess-use-eldoc nil))

    (use-package ess
      :ensure t
      :mode (("\\.R\\'" . R-mode)
             ("\\.Rmd\\'" . R-markdown-mode)
             ("\\.Rnw\\'" . R-noweb-mode)
             ("\\.jl\\'" . ess-julia-mode))
      :init
      (require 'ess-site)
      (setq ess-eval-visibly 'nowait)
      (setq ess-ask-for-ess-directory nil)
      :config
      (setq ess-toggle-underscore nil)
      (setq ess-default-style 'DEFAULT)
      (setq ess-indent-with-fancy-comments nil)
      (setq ess-fancy-comments nil)
      (setq ess-history-file nil)
      (setq ess-use-flymake nil)
      (setq ess-R-font-lock-keywords
            '((ess-R-fl-keyword:fun-calls . t)
              (ess-R-fl-keyword:keywords . t)
              (ess-R-fl-keyword:assign-ops . t)
              (ess-R-fl-keyword:constants . t)
              (ess-R-fl-keyword:messages . t)
              (ess-R-fl-keyword:modifiers . t)
              (ess-R-fl-keyword:fun-defs . t)
              (ess-R-fl-keyword:numbers . t)
              (ess-R-fl-keyword:operators . t)
              (ess-R-fl-keyword:delimiters . t)
              (ess-R-fl-keyword:= . t)
              (ess-R-fl-keyword:+ . t)
              (ess-R-fl-keyword:- . t)
              (ess-R-fl-keyword:* . t)
              (ess-R-fl-keyword:/ . t)
              (ess-R-fl-keyword:^ . t)
              (ess-R-fl-keyword:< . t)
              (ess-R-fl-keyword:> . t)
              (ess-R-fl-keyword:! . t)
              (ess-R-fl-keyword:% . t)
              (ess-R-fl-keyword:%op% . t)
              (ess-R-fl-keyword:%!in% . t)
              (ess-R-fl-keyword:%notin% . t)))
       ;; to be able to use pyvenv-workon, one has to set $WORKON_HOME var
      (set-conda-envs-dir-as-workon) ;; conda env need python!
      :bind
      (:map ess-mode-map
            ("C-c C-j" . ess-eval-line-and-step)
            ("C-c C-l" . ess-eval-region-or-function-or-paragraph-and-step)
            ("C-c C-r" . ess-eval-region)
            ("C-c C-p" . ess-eval-buffer)
            ("C-c C-o" . ess-eval-chunk))
      )

#+END_SRC

#+RESULTS:
: ess-eval-chunk

| Switch to buffer runnng R    | C-c C-z          |
| evaluate code pieces         | C-c C-n, C-c C-r |
| evaluate line/expression     | C-c C-c          |
| interface to R documentation | C-c C-v          |
| help                         | ess-help, C-h h  |

`M-x pyvenv-workon` lists only conda environments which contain python!
My workaround to see my `julia` environment in conda was to install python into it!
`conda install -c conda-forge python`. After that, `M-x pyvenv-workon` listed julia.
I chose it. And then with `M-x julia` I could start via ess Julia!

C-c C-r however was not transpassing the region.

So setting up the section for 
(set-conda-envs-dir-as-workon)
is crucial.

Then, I can do `pyvenv-workon`.

I think however, that I have not to rely on it.
I could install the other conda manager.

The ess package - it was crucial for Julia files
to be recognized to set 
` ("\\.jl\\'" . ess-julia-mode)`
in the mode list.

From then on, `C-c C-p` even worked.
And `C-c C-r`.

Setting the key bindings in the `use-package` is also important.

Julia has DbugAdapter.jl - the exact backend used by VS Code
DAPE can talk tot hat like VS Code does


Pkg.add("DebugAdapter")
Pkg.add("Debugger")
Pkg.add("Rebugger")
Pkg.add("Infiltrator")

The debug adapter runs a small JSON-RPC server.
launch it manually in a terminal:
julia --startup-file=no -e "using DebugAdapter; run_debug_adapter()"
this starts debug adapter on port 8080
leave this terminal running!

tell dape to connect to julia

(setq dape-configs
      (append
       '((julia
          :type "executable"
          :request "attach"
          :host "127.0.0.1"
          :port 8080
          :name "Julia :: attach"
          :dap-server-path nil)) ;; no need to auto-start Julia, we run it manually
       dape-configs))

 Then from Emacs:
 M-x dape-debug RET julia RET

 DaPE attach to Julia DAP server


 alternatively:

 (defun my/dape-julia ()
  "Attach to a running Julia DebugAdapter.jl server."
  (interactive)
  (dape-debug
   `(:type "executable"
     :request "attach"
     :host "127.0.0.1"
     :port 8080
     :name "Julia :: attach")))

(global-set-key (kbd "<f7>") #'my/dape-julia)

this will launch my/dape-julia on key stroke!

org-mode + Julia debugging
or automating launch via async-shell-command in emacs!
* Org-roam

#+begin_src elisp
  ;; Enable Org-mode and Org-roam
  (use-package org
    :ensure t
    :bind
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c o" . org-open-at-point)
    ("C-c r" . org-refile)
    ("C-c A" . org-archive-subtree)
    ("C-c t" . org-todo)
    ("C-c i" . org-clock-in)
    ("C-c o" . org-clock-out)
    ("C-c d" . org-deadline)
    ("C-c s" . org-schedule)
    ("C-c l" . org-store-link)
    :config
    ;; Basic Org-mode settings
    (setq org-agenda-files '("~/org/tasks.org" "~/org/projects.org"))

    (setq org-agenda-files (directory-files-recursively "~/org/" "\\.org$")) ;; all files in org folder in org agenda
    (setq org-log-done 'time)  ;; Log when tasks are marked as DONE
    (setq org-use-tag-inheritance t)  ;; Enable tag inheritance


    ;; Custom TODO keywords
    (setq org-todo-keywords
          '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "BLOCKED(b)" "|" "DONE(d)" "CANCELED(c)")))

    ;; Define available tags globally
    (setq org-tag-alist '((:startgroup)
                          ("@work" . ?w)
                          ("@home" . ?h)
                          (:endgroup)
                          ("urgent" . ?u)
                          ("important" . ?i)
                          ("lowpriority" . ?l)
                          ("reading" . ?r)
                          ("project" . ?p))
          org-fast-tag-selection-include-custom t) ;; allow on-the-fly generation

    ;; Custom agenda views for Eisenhower Matrix, PARA, etc.
    (setq org-agenda-custom-commands
          '(("e" "Eisenhower Matrix"
             ((tags-todo "+urgent+important"
                         ((org-agenda-overriding-header "Quadrant I: Urgent and Important")))
              (tags-todo "+important-urgent"
                         ((org-agenda-overriding-header "Quadrant II: Not Urgent but Important")))
              (tags-todo "+urgent-important"
                         ((org-agenda-overriding-header "Quadrant III: Urgent but Not Important")))
              (tags-todo "+low"
                         ((org-agenda-overriding-header "Quadrant IV: Not Urgent and Not Important")))))
            ("p" "PARA View"
             ((tags-todo "+project"
                         ((org-agenda-overriding-header "Projects")))
              (tags-todo "+area"
                         ((org-agenda-overriding-header "Areas of Responsibility")))
              (tags-todo "+resource"
                         ((org-agenda-overriding-header "Resources")))
              (tags-todo "+archive"
                         ((org-agenda-overriding-header "Archives")))))))

    ;; Enable time tracking and log idle time
    (setq org-clock-idle-time 10)  ;; Auto-pause after 10 mins idle
    )

  ;; Enable Org-roam for Zettelkasten-like note-taking
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/org/roam/")  ;; Directory for Org-roam notes
    :config
    ;; Keybindings for Org-roam
    (setq org-roam-v2-ack t)
    (org-roam-db-autosync-mode)

    ;; Keybindings for Org-roam
    (global-set-key (kbd "C-c n f") 'org-roam-node-find)
    (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
    (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
    (global-set-key (kbd "C-c n t") 'org-roam-dailies-capture-today)

    ;; Org-oram dailies configuration
    (setq org-roam-dailies-directory "~/org/roam/daily/")
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %<%H:%M> - %?"
             :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))

    ;; Add tags to Org-roam notes
    (setq org-roam-tag-sources '(prop all-directories))
    )

  ;; Enable Pomodoro Technique in Org-mode with org-pomodoro
  (use-package org-pomodoro
    :ensure t
    :bind (:map org-mode-map
                ("C-c p" . org-pomodoro))  ;; Start Pomodoro timer
    :config
    ;; Customize sounds and settings for Pomodoro
    (setq org-pomodoro-length 25)
    (setq org-pomodoro-short-break-length 5)
    (setq org-pomodoro-long-break-length 15)
    (setq org-pomodoro-finished-sound "~/.emacs.d/mixkit-achievement-bell-600.wav")
    ;; got it from: https://mixkit.co/free-sound-effects/bell/ it is free! You can search there for other bells.
    )

  ;; Optional: Enable org-ql for advanced queries in Org-mode
  (use-package org-ql
    :ensure t
    :config
    (setq org-ql-search-headline-sorting-functions '(org-ql--sort-by-date org-ql--sort-by-todo))
    )

  ;; Org-capture templates for GTD and PARA
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/org/inbox.org")
           "* TODO %?\n  %u\n")
          ("p" "Project" entry (file "~/org/projects.org")
           "* PROJECT %?\n  %u\n")
          ("n" "Note" entry (file "~/org/notes.org")
           "* %u %?\n")))
#+end_src

* General mac

#+begin_src elisp
  (when (eq system-type 'darwin)
    (setq mac-option-key-is-meta t)
    (setq mac-command-key-is-meta nil)
    (setq mac-command-modifier 'super)
    (setq mac-option-modifier 'meta))
#+end_src

* Docker
#+begin_src elisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")
#+end_src

I added this and did `C-c C-c` but there was an error.
The solution was: temporarily added (package-refresh-contents) into the block
above the use-package command and did again `C-c C-c`
#+RESULTS:
: ((\.dockerfile\' . dockerfile-mode) ([/\]\(?:Containerfile\|Dockerfile\)\(?:\.[^/\]*\)?\' . dockerfile-mode) (\.ya?ml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (Dockerfile\' . dockerfile-mode) (\.Rnw\' . R-noweb-mode) (\.Rmd\' . R-markdown-mode) (\.R\' . R-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION\' . conf-colon-mode) (/Makevars\(\.win\)?\' . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.jl\' . julia-mode) (/git-rebase-todo\' . git-rebase-mode) (\.cpp[rR]\' . poly-c++r-mode) (\.[Rr]cpp\' . poly-r+c++-mode) (\.[rR]brew\' . poly-brew+r-mode) (\.[rR]html\' . poly-html+r-mode) (\.rapport\' . poly-rapport-mode) (\.[rR]md\' . poly-markdown+r-mode) (\.[rR]nw\' . poly-noweb+r-mode) (\.Snw\' . poly-noweb+r-mode) (\.md\' . poly-markdown-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.nw\' . poly-noweb-mode) (\.rktl\' . racket-mode) (\.rktd\' . racket-mode) (\.rkt\' . racket-mode) (\.ts\' . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

* Yaml
#+begin_src elisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.ya?ml\\'"
    :hook (yaml-mode . (lambda ()
                         (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

#+RESULTS:
: ((\.ya?ml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (Dockerfile\' . dockerfile-mode) (\.Rnw\' . R-noweb-mode) (\.Rmd\' . R-markdown-mode) (\.R\' . R-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION\' . conf-colon-mode) (/Makevars\(\.win\)?\' . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.jl\' . julia-mode) (/git-rebase-todo\' . git-rebase-mode) (\.cpp[rR]\' . poly-c++r-mode) (\.[Rr]cpp\' . poly-r+c++-mode) (\.[rR]brew\' . poly-brew+r-mode) (\.[rR]html\' . poly-html+r-mode) (\.rapport\' . poly-rapport-mode) (\.[rR]md\' . poly-markdown+r-mode) (\.[rR]nw\' . poly-noweb+r-mode) (\.Snw\' . poly-noweb+r-mode) (\.md\' . poly-markdown-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.nw\' . poly-noweb-mode) (\.rktl\' . racket-mode) (\.rktd\' . racket-mode) (\.rkt\' . racket-mode) (\.ts\' . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.cs\' . csharp-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.webp\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (\.eld\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|sls\|sld\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . js-json-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) (\.erts\' . erts-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|EPUB\|CBZ\|FB2\|O?XPS\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|epub\|cbz\|fb2\|o?xps\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.mailmap\' . conf-unix-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.heic\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

* Rust
#+begin_src elisp
  ;;; --- Tree-sitter core (built-in on Emacs 29) ---
  (use-package treesit
    :ensure nil                  ;; built-in
    :demand t
    :init
    (setq treesit-language-source-alist
          '((rust "https://github.com/tree-sitter/tree-sitter-rust")))
    :config
    ;; Install grammar once if missing (safe if already installed)
    (when (and (fboundp 'treesit-language-available-p)
               (not (treesit-language-available-p 'rust)))
      (ignore-errors (treesit-install-language-grammar 'rust))))

  ;;; --- Rust major mode (tree-sitter first, auto-fallback to classic) ---
  (use-package rust-ts-mode
    :ensure nil                  ;; built-in on Emacs 29
    :mode "\\.rs\\'"
    :init
    ;; Prefer ts-mode whenever classic rust-mode would be chosen
    (when (and (featurep 'treesit)
               (fboundp 'treesit-language-available-p)
               (treesit-language-available-p 'rust))
      (add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode)))
    :hook
    ;; start LSP automatically (deferred) when in ts-mode
    (rust-ts-mode . lsp-deferred)
    :config
    (setq rust-ts-mode-indent-offset 4))

  ;; If ts-mode canâ€™t be used (no grammar or no treesit), ensure we still have a mode.
  (use-package rust-mode
    :if (not (and (featurep 'treesit)
                  (fboundp 'treesit-language-available-p)
                  (treesit-language-available-p 'rust)))
    :ensure t
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred))

  ;;; --- LSP for Rust ---
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :custom
    (lsp-rust-analyzer-server-command '("rust-analyzer"))
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-rust-analyzer-proc-macro-enable t)
    ;; modern cross-language inlay hints toggle
    (lsp-inlay-hint-enable t))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

* Toml
#+begin_src elisp
  (use-package toml-mode
    :ensure t)
#+end_src
