
#+STARTUP: overview hidestars indent align inlineimages

* Settings
  
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
#+END_SRC


* Try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC


* Ido mode

Using swiper comment it out!
#+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)				
#+END_SRC

* Ibuffer

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
  (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default open in another window
#+END_SRC

* Tabbar

#+BEGIN_SRC emacs-lisp
  (use-package tabbar
    :ensure t
    :config
    (tabbar-mode 1))
#+END_SRC

* Window moves

** Windmove
Move by S-arrows between windows
#+BEGIN_SRC emacs-lisp
;; (windmove-default-keybindings)
#+END_SRC


** Winnermode
Move via C-c left-right-arrow
#+BEGIN_SRC emacs-lisp
;; (winner-mode 1)
#+END_SRC

** Ace-window
   Still uses C-x o.


#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC

* Swiper
  For better searches

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

  if using swiper, comment out ido.

* Navigation with Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

They recommend `:config (avy-setup-default)

* Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC


* Org stuff
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path (expand-file-name "~/src/lisp") t)
;; (add-to-list 'load-path (expand-file-name "~/path/to/orgdir/contrib/lisp") t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** Org-babel-execute
#+BEGIN_SRC emacs-lisp
  ;; (require 'org)
  ;; (require 'ob)

  ;; (require 'ob-clojure)
  ;; (setq org-babel-clojure-backend 'cider)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (R . t)
     (lisp . t)
     (clojure . t)))

  ;; stop emacs asking for confirmation
  (setq org-confirm-babel-evaluate nil)

#+END_SRC

#+RESULTS:

User `:result pp` to get value and output 
in one go and functioning correct.
value e.g. didn't work - no newline inbetween
results!

** Ox-reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

** Wrap text into an org-mode block

[[http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/][taken from here]]

 #+BEGIN_SRC emacs-lisp
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; function to wrap blocks of text in org templates                       ;;
      ;; e.g. latex or src etc                                                  ;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      (defun org-begin-template ()
        "Make a template at point."
        (interactive)
        (if (org-at-table-p)
            (call-interactively 'org-table-rotate-recalc-marks)
          (let* ((choices '(("s" . "SRC")
                            ("e" . "EXAMPLE")
                            ("q" . "QUOTE")
                            ("v" . "VERSE")
                            ("c" . "CENTER")
                            ("l" . "LaTeX")
                            ("h" . "HTML")
                            ("a" . "ASCII")
                            ("S-e" . "SRC")
                            ("S-h" . "SRC")
                            ("S-h" . "SRC")
                            ("S-p" . "SRC")
                            ("S-l" . "SRC"))
                 (add-additionally '(("s" . "")
                                     ("e" . "")
                                     ("q" . "")
                                     ("v" . "")
                                     ("c" . "")
                                     ("l" . "")
                                     ("h" . "")
                                     ("a" . "")
                                     ("S-e" . " elisp")
                                     ("S-h" . " haskell")
                                     ("S-r" . " r")
                                     ("S-p" . " python")
                                     ("S-l" . " lisp"))
                 (key
                  (key-description
                   (vector
                    (read-key-sequence
                     (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                             (mapconcat (lambda (choice)
                                          (concat (propertize (car choice) 'face 'font-lock-type-face)
                                                  ": "
                                                  (cdr choice)))
                                        choices
                                        ", ")))))))
            (let ((result (assoc key choices))
                  (add-result (assoc key add-additionally)))
              (when result
                (let ((choice (cdr result))
                      (adder  (cdr add-result)))
                  (cond
                   ((region-active-p)
                    (let ((start (region-beginning))
                          (end (region-end)))
                      (goto-char end)
                      (insert "#+END_" choice "\n")
                      (goto-char start)
                      (insert "#+BEGIN_" choice adder "\n")))
                   (t
                    (insert "#+BEGIN_" choice adder "\n")
                    (save-excursion (insert "#+END_" choice))))))))))

      ;;bind to key
      (define-key org-mode-map (kbd "C-<") 'org-begin-template)
 #+END_SRC

** <sTAB didn't work
[[https://orgmode.org/manual/Installation.html][following this]] I did:
cd
mkdir -p src
cd src
git clone https://code.orgmode.org/bzg/org-mode.git
cd org-mode
make autoloads

then, add 

(add-to-list 'load-path "~/path/to/orgdir/lisp")
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)

this didn't help
deleted in `~/.emacs.d/elpa` folder all org-related
now it works!

** Org-Roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/RoamNotes")
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert))
    :config (org-roam-setup))
#+END_SRC

* Undo tree

#+BEGIN_SRC emacs-lisp
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :init
  ;;   (global-undo-tree-mode))
#+END_SRC

Basic emacs undo and redo is C-/ and C-_
Undo tree you can bring up with C-x u

* Flycheck

sudo pip install --upgrade pylint

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

sudo pip install --upgrade virtualenv
sudo pip install --upgrade epc

#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC

* Common Lisp 
#+BEGIN_SRC elisp
  (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; Replace "sbcl" with the path to your implementation
  (setq inferior-lisp-program "/usr/bin/sbcl")

#+END_SRC
* Common Lisp Roswell
#+BEGIN_SRC elisp
  ;; ;; for slime
  ;; (load (expand-file-name "~/.roswell/helper.el"))
  ;; (setq inferior-lisp-program "/usr/local/bin/ros run")
#+END_SRC
* R/Julia ESS

For conda use still `M-x pyvenv-activateRET path to conda env`

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :init 
    (require 'ess-site)
    (setq ess-use-flymake nil)
    (setq ess-eval-visibly-p nil)
    (setq ess-use-eldoc nil))

#+END_SRC

| Switch to buffer runnng R    | C-c C-z          |
| evaluate code pieces         | C-c C-n, C-c C-r |
| evaluate line/expression     | C-c C-c          |
| interface to R documentation | C-c C-v          |
| help                         | ess-help, C-h h  |


