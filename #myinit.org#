

#+STARTUP: overview hidestars indent align inlineimages

* Settings
  
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)



  (use-package sweet-theme
    :ensure t
    :init
    (load-theme 'sweet t))

  (use-package doom-modeline
    :ensure t
    :hook
    (after-init . doom-modeline-mode))
#+END_SRC


* Try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-separator " â†’ " )
    (setq which-key-prefix-prefix "+"))
#+END_SRC


* Ido mode

Using swiper comment it out!
#+BEGIN_SRC emacs-lisp
  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)				
#+END_SRC

* Ibuffer

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
  (defalias 'list-buffers 'ibuffer-other-window) ; make ibuffer default open in another window
#+END_SRC

* Tabbar

#+BEGIN_SRC emacs-lisp
  (use-package tabbar
    :ensure t
    :config
    (tabbar-mode 1))
#+END_SRC

* Window moves

** Windmove
Move by S-arrows between windows
#+BEGIN_SRC emacs-lisp
;; (windmove-default-keybindings)
#+END_SRC


** Winnermode
Move via C-c left-right-arrow
#+BEGIN_SRC emacs-lisp
;; (winner-mode 1)
#+END_SRC

** Ace-window
   Still uses C-x o.


#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)
#+END_SRC

* Swiper
  For better searches

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure try
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

  if using swiper, comment out ido.
  
* Navigation with Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC

They recommend `:config (avy-setup-default)

* Autocomplete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC



* JavaScript and TypeScript
#+begin_src emacs-lisp
  ;; js itself is natively recognized



  ;; we add typescript


  ;; ;; Define ts-mode for editing TypeScript src blocks in Org mode
  ;; (define-derived-mode ts-mode typescript-mode "ts"
  ;;   "Major mode for editing TypeScript src blocks in Org mode.")

  ;; ;; TypeScript Mode
  ;; (use-package typescript-mode
  ;;   :ensure t  ;; Install `typescript-mode` if not already installed
  ;;   :mode ("\\.ts\\'" . typescript-mode)  ;; Automatically associate `.ts` files with `typescript-mode`
  ;;   :init
  ;;   ;; Optional initialization if needed
  ;;   (setq typescript-indent-level 2)  ;; Set indentation level to 2 spaces
  ;;   )

  ;; ;; DAP Mode for Debugging
  ;; (use-package dap-mode
  ;;   :ensure t  ;; Install `dap-mode` if not already installed
  ;;   :config
  ;;   ;; Configure dap-mode as needed
  ;;   )

  ;; ;; LSP Mode for Language Server Protocol
  ;; (use-package lsp-mode
  ;;   :ensure t  ;; Install `lsp-mode` if not already installed
  ;;   :commands lsp  ;; Initialize lsp-mode when needed
  ;;   :hook
  ;;   ((typescript-mode . lsp)
  ;;    (javascript-mode . lsp))
  ;;   :custom
  ;;   (lsp-enable-file-watchers nil)  ;; Disable file watchers for better performance
  ;;   )

  ;; ;; Include Org Babel TypeScript Execution Configuration
  ;; ;; Reference: https://www.reddit.com/r/emacs/comments/b7rsxu/behold_orgbabelexecutetypescript/
  ;; (use-package ob-typescript
  ;;   :after org
  ;;   :config
  ;;   (add-to-list 'org-babel-load-languages '(typescript . t))
  ;;   (setq org-babel-default-header-args:typescript
  ;;         '((:results . "output")
  ;;           (:exports . "both")
  ;;           (:shebang . "#!/usr/bin/env ts-node")
  ;;           (:eval . "typescript")))
  ;;   )

  ;; ;; Optional: Add tree-sitter and tree-sitter-langs configuration if needed
  ;; ;; (use-package tree-sitter
  ;; ;;   :ensure t
  ;; ;;   :config
  ;; ;;   (require 'tree-sitter-langs)
  ;; ;;   (global-tree-sitter-mode)




  (use-package typescript-mode
    :ensure t
    :mode "\\.ts\\'"
    :config
    ;; Optional additional configuration can go here
    :init
    (setq typescript-indent-level 2)  ;; Set indentation level to 2 spaces
    )

  ;; and add org support
  (use-package ob-typescript
    :ensure t
    :config
    ;; Set the command for TypeScript execution
    (setq org-babel-command:typescript "npx ts-node"))
#+end_src
* Org stuff
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path (expand-file-name "~/src/lisp") t)
;; (add-to-list 'load-path (expand-file-name "~/path/to/orgdir/contrib/lisp") t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (setq org-adapt-indentation t) ;; align text to header's start
        )
#+END_SRC

** Org-babel-execute
#+BEGIN_SRC emacs-lisp
              ;; (require 'org)
              ;; (require 'ob)

              ;; (require 'ob-clojure)
              ;; (setq org-babel-clojure-backend 'cider)

              (org-babel-do-load-languages
               'org-babel-load-languages
               '((python . t)
                 (R . t)
                 (lisp . t)
                 (clojure . t)
                 (js . t)
                 (typescript . t)))

              ;; stop emacs asking for confirmation
              (setq org-confirm-babel-evaluate nil)

#+END_SRC

#+RESULTS:

User `:result pp` to get value and output 
in one go and functioning correct.
value e.g. didn't work - no newline inbetween
results!

** Ox-reveal

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

** Org-Roam
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'package-archives
  ;;              (cons "gnu-devel" "https://elpa.gnu.org/devel/")
  ;;              t)

  ;; (use-package org-roam
  ;;  :ensure t)

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"   . completion-at-point))
    :config (org-roam-setup))
#+END_SRC

* Undo tree

#+BEGIN_SRC emacs-lisp
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :init
  ;;   (global-undo-tree-mode))
#+END_SRC

Basic emacs undo and redo is C-/ and C-_
Undo tree you can bring up with C-x u

* Flycheck

sudo pip install --upgrade pylint

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

sudo pip install --upgrade virtualenv
sudo pip install --upgrade epc

#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))
#+END_SRC

* Git
#+begin_src elisp
  ;; Git integration for emacs
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+end_src
* Common Lisp
#+BEGIN_SRC elisp
  ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; ;; Replace "sbcl" with the path to your implementation
  ;; (setq inferior-lisp-program "/usr/bin/sbcl")

#+END_SRC
* Common Lisp Roswell
#+BEGIN_SRC emacs-lisp
  ;; for slime

  (defun system-ram-size-in-mb ()
    "Return the system RAM size in megabytes, platform-independent."
    (interactive)
    (let ((ram-size-command
           (cond
            ((eq system-type 'darwin) "sysctl -n hw.memsize")
            ((eq system-type 'gnu/linux) "grep MemTotal /proc/meminfo | awk '{print $2 * 1024}'")
            ((eq system-type 'windows-nt) "wmic computersystem get TotalPhysicalMemory /Value | findstr TotalPhysicalMemory="))))
      (let ((output (shell-command-to-string ram-size-command)))
        (if output
            (/ (string-to-number (string-trim (cadr (split-string output "=")))) (* 1024 1024))
          (error "Failed to get system RAM size")))))

  (defun string-trim (str)
    "Trim leading and trailing whitespace from STR."
    (replace-regexp-in-string "\\`[ \t\n\r]+" "" (replace-regexp-in-string "[ \t\n\r]+\\'" "" str)))

  ;; ;; set memory of sbcl to your machine's RAM size for sbcl and clisp
  ;; ;; (but for others - I didn't used them yet)
  ;; (defun unix-system-ram-size ()
  ;;   (let ((bytes (string-to-number (shell-command-to-string "sysctl hw.memsize | awk '{print $2}'"))))
  ;;     (/ bytes (* 1024 1024)))) ;; this works also for macos
  ;; ;; previously  "free --mega | awk 'FNR == 2 {print $2}'"
  ;; ;; (linux-system-ram-size)


  (use-package slime
    :ensure t
    :config
    ;; roswell is not available for windows.
    (cond
     ((eq system-type 'darwin) (load (expand-file-name "~/.roswell/helper.el")))
     ((eq system-type 'gnu/linux) (load (expand-file-name "~/.roswell/helper.el")))
     ((eq system-type 'windows-nt) (load (concat (getenv "USERPROFILE") "\\quicklisp\\slime-helper.el"))
      (setq inferior-lisp-program (concat "sbcl --dynamic-space-size "
                                          (number-to-string (system-ram-size-in-mb)))))
     (t
      (error "Failed to load helper.el")))

    ;; $ ros config
    ;; $ ros use sbcl dynamic-space-size=3905
    ;; query with: (/ (- sb-vm:dynamic-space-end sb-vm:dynamic-space-start) (expt 1024 2))
    (cond
     ((or (eq system-type 'darwin) (eq system-type 'gnu/linux))
      (setq inferior-lisp-program (concat "ros -Q dynamic-space-size=" (number-to-string (system-ram-size-in-mb)) " run"))))

    ;; and for fancier look I personally add:
    (setq slime-contribs '(slime-fancy slime-cl-indent))
    (setq listp-indent-function 'common-lisp-indent-function)

    ;; ;; ensure correct indentation e.g. of `loop` form
    ;; (add-to-list 'slime-contribs 'slime-cl-indent)

    ;; don't use tabs
    (setq-default indent-tabs-mode nil)

    )

  ;; (setq slime-lisp-implementations `(("sbcl" ("ros use sbcl && ros run --" "--dynamic-space-size"
  ;;                                             ,(number-to-string (linux-system-ram-size))))
  ;;                                    ("clisp" ("ros use clisp && ros run --" "-m"
  ;;                                              ,(number-to-string (linux-system-ram-size))
  ;;                                              "MB"))
  ;;                                    ("ecl" ("ros use ecl && ros run --"))
  ;;                                    ("cmucl" ("ros use cmucl && ros run --"))))

  ;; ;; doesn't work as expected!! ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; ;; Debugger display values
  ;; (defun my-slime-step-display-value (n)
  ;;   "Step N times through the code and display the return value."
  ;;   (interactive "p")
  ;;   (slime-eval `(swank:stepper-step ,n))
  ;;   (let ((last-result (slime-eval '(swank:inspector-call-nth-function 0))))
  ;;     (message "Return value: %s" last-result)))

  ;; (define-key slime-mode-map (kbd "C-c C-s") 'my-slime-step-display-value)

  ;; (defun my-sly-step-display-value (n)
  ;;   "Step N times through the code and display the return value."
  ;;   (interactive "p")
  ;;   (sly-db-step n)
  ;;   (let ((last-result (sly-eval '(slynk:call-with-last-step-result))))
  ;;     (message "Return value: %s" last-result)))
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      ;; (define-key sly-db-mode-map (kbd "C-c C-s") 'my-sly-step-display-value)
#+END_SRC
* Racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :ensure t
    :hook (racket-mode . racket-xp-mode))

  (use-package company
    :ensure t
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.1)
    (setq company-tooltip-align-annotations t)
    :hook
    ((racket-mode . company-mode)
     (racket-repl-mode . company-mode)))

  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((racket-mode . rainbow-delimiters-mode)
     (racket-repl-mode . rainbow-delimiters-mode)))

  (use-package paredit
    :ensure t
    :hook
    ((racket-mode . paredit-mode)
     (racket-repl-mode . paredit-mode)))
#+end_src
* R/Julia ESS

For conda use still `M-x pyvenv-activate RET path to conda env`

#+BEGIN_SRC emacs-lisp
  ;; (use-package ess
  ;;   :ensure t
  ;;   :init 
  ;;   (require 'ess-site)
  ;;   (setq ess-use-flymake nil)
  ;;   (setq ess-eval-visibly-p nil)
  ;;   (setq ess-use-eldoc nil))

  (use-package ess
    :ensure t
    :mode (("\\.R\\'" . R-mode)
           ("\\.Rmd\\'" . R-markdown-mode)
           ("\\.Rnw\\'" . R-noweb-mode))
    :init
    (require 'ess-site)
    (setq ess-eval-visibly 'nowait)
    (setq ess-ask-for-ess-directory nil)
    :config
    (setq ess-toggle-underscore nil)
    (setq ess-default-style 'DEFAULT)
    (setq ess-indent-with-fancy-comments nil)
    (setq ess-fancy-comments nil)
    (setq ess-history-file nil)
    (setq ess-use-flymake nil)
    (setq ess-R-font-lock-keywords
          '((ess-R-fl-keyword:fun-calls . t)
            (ess-R-fl-keyword:keywords . t)
            (ess-R-fl-keyword:assign-ops . t)
            (ess-R-fl-keyword:constants . t)
            (ess-R-fl-keyword:messages . t)
            (ess-R-fl-keyword:modifiers . t)
            (ess-R-fl-keyword:fun-defs . t)
            (ess-R-fl-keyword:numbers . t)
            (ess-R-fl-keyword:operators . t)
            (ess-R-fl-keyword:delimiters . t)
            (ess-R-fl-keyword:= . t)
            (ess-R-fl-keyword:+ . t)
            (ess-R-fl-keyword:- . t)
            (ess-R-fl-keyword:* . t)
            (ess-R-fl-keyword:/ . t)
            (ess-R-fl-keyword:^ . t)
            (ess-R-fl-keyword:< . t)
            (ess-R-fl-keyword:> . t)
            (ess-R-fl-keyword:! . t)
            (ess-R-fl-keyword:% . t)
            (ess-R-fl-keyword:%op% . t)
            (ess-R-fl-keyword:%!in% . t)
            (ess-R-fl-keyword:%notin% . t)))
    :bind
    (:map ess-mode-map
          ("C-c C-j" . ess-eval-line-and-step)
          ("C-c C-l" . ess-eval-region-or-function-or-paragraph-and-step)
          ("C-c C-r" . ess-eval-region)
          ("C-c C-p" . ess-eval-buffer)
          ("C-c C-o" . ess-eval-chunk))
    )

#+END_SRC

| Switch to buffer runnng R    | C-c C-z          |
| evaluate code pieces         | C-c C-n, C-c C-r |
| evaluate line/expression     | C-c C-c          |
| interface to R documentation | C-c C-v          |
| help                         | ess-help, C-h h  |

